
"""
https://proproprogs.ru/django/django-chto-eto-takoe-poryadok-ustanovki
Django - что это такое, порядок установки
"""

"""
-0- 
Сначала от клиента поступает запрос, например, он вводит в браузере адрес https://youtube.com. Информационные 
пакеты начинают двигаться в сторону сервера с сайтом Youtube. Вопрос о том, как они это делают, мы оставим в стороне, 
это называется маршрутизацией в сети Интернет. Главное, что они доходят до сервера (то есть, компьютера), 
где расположен Youtube. На этом компьютере установлено специальное программное обеспечение – Web-сервер. Очень часто 
используют уже готовые разработки с открытым кодом: Apache и Nginx. Реже какие-либо свои программные продукты.
 
Так вот, этот Web-сервер постоянно «слушает» каналы связи и в момент поступления запроса от пользователя должен 
перенаправить его на обработку соответствующему сайту (так как на одном сервере может находиться множество сайтов). 
Сайты способны по разному обрабатывать входящие запросы, например, используя PHP и CGI скрипты, или же могут 
использовать фреймворки – обертки для выбранного языка программирования, значительно упрощающие обработку запросов от 
клиентов сайта. 

В частности, Django – это и есть такая обертка для языка Python. В этом случае сервер по интерфейсу 
WSGI передает обработку запроса этому фреймворку, используется определенное представление, отвечающее за текущий 
запрос, и результатом обработки, как правило, является HTML-страница, которая сначала передается Web-серверу также по 
WSGI-интерфейсу, а он уже передает страницу конечному пользователю. Страница отображается в браузере клиента и он 
видит заветный сайт Youtube. Вот так в очень упрощенном виде происходит взаимодействие между пользователем, 
сервером и фреймворком
"""

"""
-1- 
WSGI (Web Server Gateway Interface) — стандарт взаимодействия между Python-программой, выполняющейся на 
стороне сервера, и самим веб-сервером
"""

"""
-2-
Отлично, теперь мы знаем, где находится фреймворк и за что он отвечает. Но как нам в домашних условиях, 
в учебных целях или целях разработки проекта запустить Django? Здесь есть хорошая новость. Во-первых, 
во всех современных компьютерах функционирует внутренняя сеть, которая называется:
localhost – 127.0.0.1
Во-вторых, пакет Django в своем составе содержит отладочный Web-сервер, который можно запустить на домашнем 
ПК и проверить работу сайта, не используя сторонний сервер. Конечно, после полной разработки и отладки 
проекта сайты почти всегда размещаются на арендуемых серверах (хостингах) и уже там работают в боевом режиме. 
"""

# pip install django
# pip list
# django-admin startproject <имя сайта>
"""
-3-
И фреймворк создал папку coolsite в рабочей папке проекта. Внутри этой папки имеется одноименная вложенная папка 
пакета, который определяет конфигурацию нашего сайта. Поэтому его часто так и называют – пакетом конфигурации. Также 
есть еще один отдельный файл manage.py, через который и производится управление данным сайтом. Например, 
мы будем создавать приложение, выполнять миграции БД, запускать тестовый веб-сервер и так далее. В действительности, 
это всего лишь своеобразная утилита, посредник, который передает наши команды django-admin и выполняет их «от лица» 
нашего сайта. Подробнее обо всем этом мы еще будем говорить
"""

# cd coolsite
# python manage.py runserver
"""
-4-
Происходит запуск локального Веб-сервера, который поставляется вместе с Django, и наш сайт должен быть 
доступен по адресу 
http://127.0.0.1:8000
Преимущество отладочного сервера в том, что он автоматически перезапускается при изменении программы сайта. 
На практике это дает большое удобство. Но полностью полагаться на эту возможность не стоит, так как иногда 
Django все же игнорирует изменения, а точнее, новые дополнения, например, новые созданные файлы. Поэтому, 
если вы видите, что что-то работает не так, попробуйте просто перезапустить сервер вручную. Для его 
завершения достаточно нажать комбинацию клавиш:
Ctrl + Break (а также Ctrl + C в Windows)
а, затем, снова запустить:
python manage.py runserver 
"""





